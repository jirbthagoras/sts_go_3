openapi: 3.0.0
info:
  title: Film REST API
  version: 1.0.0
  description: A REST API for managing films with PostgreSQL database
  termsOfService: http://swagger.io/terms/
  contact:
    name: API Support
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: /api
    description: API server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Type "Bearer" followed by a space and JWT token.

  schemas:
    Film:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier for the film
        title:
          type: string
          example: "The Shawshank Redemption"
          description: Title of the film
        director:
          type: string
          example: "Frank Darabont"
          description: Director of the film
        year:
          type: integer
          example: 1994
          description: Release year of the film
        genre:
          type: string
          example: "Drama"
          description: Genre of the film
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - title
        - director
        - year

    FilmRequest:
      type: object
      properties:
        title:
          type: string
          example: "The Shawshank Redemption"
          description: Title of the film
        director:
          type: string
          example: "Frank Darabont"
          description: Director of the film
        year:
          type: integer
          example: 1994
          description: Release year of the film
        genre:
          type: string
          example: "Drama"
          description: Genre of the film
      required:
        - title
        - director
        - year

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "admin"
          description: Username for authentication
        password:
          type: string
          example: "admin123"
          description: Password for authentication
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "abc123def456"
          description: JWT token for authentication

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request"
          description: Error message

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"
          description: Success message

paths:
  /login:
    post:
      operationId: loginUser
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      operationId: logoutUser
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /films:
    get:
      operationId: getAllFilms
      tags:
        - Films
      summary: Get all films
      description: Get list of all films
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      operationId: createFilm
      tags:
        - Films
      summary: Add a new film
      description: Create a new film
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmRequest'
      responses:
        '201':
          description: Film created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /films/{id}:
    put:
      operationId: updateFilm
      tags:
        - Films
      summary: Update a film
      description: Update an existing film
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Film ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmRequest'
      responses:
        '200':
          description: Film updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Film not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: deleteFilm
      tags:
        - Films
      summary: Delete a film
      description: Delete an existing film
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Film ID
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Film deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Film not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
